From 4e8992c474be2b3c89999f116d5dea137989b694 Mon Sep 17 00:00:00 2001
From: Alexander Scheel <ascheel@redhat.com>
Date: Thu, 13 Jul 2017 12:57:53 -0400
Subject: [PATCH 5/6] Implement channel binding mech attributes

This adds initial mech attribute values and changes
SPNEGO to support these attributes.
---
 src/lib/gssapi/generic/gssapi_ext.h     |  3 +++
 src/lib/gssapi/generic/gssapi_generic.c | 36 +++++++++++++++++++++++++++
 src/lib/gssapi/libgssapi_krb5.exports   |  3 +++
 src/lib/gssapi/spnego/spnego_mech.c     | 44 ++++++++++++++++++++++++---------
 4 files changed, 75 insertions(+), 11 deletions(-)

diff --git a/src/lib/gssapi/generic/gssapi_ext.h b/src/lib/gssapi/generic/gssapi_ext.h
index b3d8839..1317da9 100644
--- a/src/lib/gssapi/generic/gssapi_ext.h
+++ b/src/lib/gssapi/generic/gssapi_ext.h
@@ -580,6 +580,9 @@ gss_import_cred(
 #define GSS_C_CHANNEL_BOUND_FLAG 2048 /* 0x00000800 */
 #define GSS_C_CB_CONFIRM_FLAG 2048 /* 0x00000800 */
 
+GSS_DLLIMP extern gss_const_OID GSS_C_MA_CBINDING_CONFIRM;
+GSS_DLLIMP extern gss_const_OID GSS_C_MA_CBINDING_MAY_CONFIRM;
+
 OM_uint32 KRB5_CALLCONV
 gss_create_sec_context(
     OM_uint32 *,                /* minor_status */
diff --git a/src/lib/gssapi/generic/gssapi_generic.c b/src/lib/gssapi/generic/gssapi_generic.c
index 5496aa3..bc8fd31 100644
--- a/src/lib/gssapi/generic/gssapi_generic.c
+++ b/src/lib/gssapi/generic/gssapi_generic.c
@@ -157,6 +157,25 @@ static const gss_OID_desc const_oids[] = {
     {7, (void *)"\x2b\x06\x01\x05\x05\x0d\x19"},
     {7, (void *)"\x2b\x06\x01\x05\x05\x0d\x1a"},
     {7, (void *)"\x2b\x06\x01\x05\x05\x0d\x1b"},
+
+    /*
+     * GSS_SEC_CONTEXT_SASL_SSF_OID 1.2.840.113554.1.2.2.5.15
+     * iso(1) member-body(2) United States(840) mit(113554)
+     * infosys(1) gssapi(2) krb5(2) krb5-gssapi-ext(5) sasl-ssf(15)
+     */
+    {11, (void *)"\x2a\x86\x48\x86\xf7\x12\x01\x02\x02\x05\x0f"},
+
+    /*
+     * TODO: actual OIDs for these.
+     * Attributes:
+     *   - GSS_C_MA_CBINDING_CONFIRM
+     *   - GSS_C_MA_CBINDING_MAY_CONFIRM
+     *
+     * See:
+     * https://tools.ietf.org/html/draft-ietf-kitten-channel-bound-flag-01
+     */
+    {11, (void *)"\x2a\x86\x48\x86\xf7\x12\x01\x02\x02\x05\xf0"},
+    {11, (void *)"\x2a\x86\x48\x86\xf7\x12\x01\x02\x02\x05\xf1"},
 };
 
 /* Here are the constants which point to the static structure above.
@@ -218,6 +237,11 @@ GSS_DLLIMP gss_const_OID GSS_C_MA_PFS               = oids+33;
 GSS_DLLIMP gss_const_OID GSS_C_MA_COMPRESS          = oids+34;
 GSS_DLLIMP gss_const_OID GSS_C_MA_CTX_TRANS         = oids+35;
 
+GSS_DLLIMP gss_OID GSS_C_SEC_CONTEXT_SASL_SSF = oids+36;
+
+GSS_DLLIMP gss_const_OID GSS_C_MA_CBINDING_CONFIRM     = oids+37;
+GSS_DLLIMP gss_const_OID GSS_C_MA_CBINDING_MAY_CONFIRM = oids+38;
+
 static gss_OID_set_desc gss_ma_known_attrs_desc = { 27, oids+9 };
 gss_OID_set gss_ma_known_attrs = &gss_ma_known_attrs_desc;
 
@@ -392,6 +416,18 @@ static struct mech_attr_info_desc {
         "context-transfer",
         "Mechanism supports security context export/import.",
     },
+    {
+        oids+37,
+        "GSS_C_MA_CBINDING_CONFIRM",
+        "channel-bindings-confirm",
+        "Mechanism supports always confirming channel binding success.",
+    },
+    {
+        oids+38,
+        "GSS_C_MA_CBINDING_CONFIRM",
+        "channel-bindings-may-confirm",
+        "Mechanism supports may indicate channel binding success.",
+    },
 };
 
 OM_uint32
diff --git a/src/lib/gssapi/libgssapi_krb5.exports b/src/lib/gssapi/libgssapi_krb5.exports
index 66ad7ad..77b8d81 100644
--- a/src/lib/gssapi/libgssapi_krb5.exports
+++ b/src/lib/gssapi/libgssapi_krb5.exports
@@ -37,6 +37,9 @@ GSS_C_MA_CBINDINGS
 GSS_C_MA_PFS
 GSS_C_MA_COMPRESS
 GSS_C_MA_CTX_TRANS
+GSS_C_MA_CBINDING_CONFIRM
+GSS_C_MA_CBINDING_MAY_CONFIRM
+GSS_C_SEC_CONTEXT_SASL_SSF
 gss_accept_sec_context
 gss_acquire_cred
 gss_acquire_cred_with_password
diff --git a/src/lib/gssapi/spnego/spnego_mech.c b/src/lib/gssapi/spnego/spnego_mech.c
index eb9070a..176ebb9 100644
--- a/src/lib/gssapi/spnego/spnego_mech.c
+++ b/src/lib/gssapi/spnego/spnego_mech.c
@@ -96,10 +96,11 @@ static gss_OID_set get_mech_set(OM_uint32 *, unsigned char **, unsigned int);
 static OM_uint32 get_req_flags(unsigned char **, OM_uint32, OM_uint32 *);
 static OM_uint32 get_available_mechs(OM_uint32 *, gss_name_t, gss_cred_usage_t,
 				     gss_const_key_value_set_t,
-				     gss_cred_id_t *, gss_OID_set *,
-				     OM_uint32 *);
+				     gss_cred_id_t *, gss_OID_set,
+				     gss_OID_set *, OM_uint32 *);
 static OM_uint32 get_negotiable_mechs(OM_uint32 *, spnego_gss_cred_id_t,
-				      gss_cred_usage_t, gss_OID_set *);
+				      gss_cred_usage_t, gss_OID_set,
+				      gss_OID_set *);
 static void release_spnego_ctx(spnego_gss_ctx_id_t *);
 static void clean_spnego_ctx(spnego_gss_ctx_id_t *);
 static spnego_gss_ctx_id_t create_spnego_ctx(int);
@@ -401,7 +402,7 @@ spnego_gss_acquire_cred_from(OM_uint32 *minor_status,
 	 */
 	status = get_available_mechs(minor_status, desired_name,
 				     cred_usage, cred_store, &mcred,
-				     &amechs, time_rec);
+				     GSS_C_NO_OID_SET, &amechs, time_rec);
 
 	if (actual_mechs && amechs != GSS_C_NULL_OID_SET) {
 		(void) gssint_copy_oid_set(&tmpmin, amechs, actual_mechs);
@@ -660,13 +661,30 @@ init_ctx_new(OM_uint32 *minor_status,
 {
 	OM_uint32 ret;
 	spnego_gss_ctx_id_t sc = NULL;
+	gss_OID_set desired_attrs = GSS_C_NO_OID_SET;
 
 	sc = *sc_out;
 	sc->initiate = 1;
 
+#if 0
+	/* Enable once mechanisms support CBINDING_MAY_CONFIRM */
+	if (sc->req_flags & GSS_C_CB_CONFIRM_FLAG) {
+		sc->req_flags |= GSS_C_MUTUAL_FLAG;
+		ret = gss_create_empty_oid_set(minor_status, &desired_attrs);
+		if (ret != GSS_S_COMPLETE)
+			return ret;
+
+		ret = gss_add_oid_set_member(
+		    minor_status,
+		    (gss_OID) GSS_C_MA_CBINDING_MAY_CONFIRM,
+		    &desired_attrs);
+		if (ret != GSS_S_COMPLETE)
+			return ret;
+	}
+#endif
 	/* determine negotiation mech set */
 	ret = get_negotiable_mechs(minor_status, spcred, GSS_C_INITIATE,
-				   &sc->mech_set);
+				   desired_attrs, &sc->mech_set);
 	if (ret != GSS_S_COMPLETE)
 		goto cleanup;
 
@@ -1301,7 +1319,7 @@ acc_ctx_hints(OM_uint32 *minor_status,
 	*minor_status = 0;
 
 	ret = get_negotiable_mechs(minor_status, spcred, GSS_C_ACCEPT,
-				   &supported_mechSet);
+				   GSS_C_NO_OID_SET, &supported_mechSet);
 	if (ret != GSS_S_COMPLETE)
 		goto cleanup;
 
@@ -1377,7 +1395,7 @@ acc_ctx_new(OM_uint32 *minor_status,
 		goto cleanup;
 	}
 	ret = get_negotiable_mechs(minor_status, spcred, GSS_C_ACCEPT,
-				   &supported_mechSet);
+				   GSS_C_NO_OID_SET, &supported_mechSet);
 	if (ret != GSS_S_COMPLETE) {
 		*return_token = NO_TOKEN_SEND;
 		goto cleanup;
@@ -1969,6 +1987,7 @@ spnego_gss_inquire_cred(
 			GSS_C_BOTH,
 			GSS_C_NO_CRED_STORE,
 			&creds,
+			GSS_C_NO_OID_SET,
 			mechanisms, NULL);
 		if (status != GSS_S_COMPLETE) {
 			dsyslog("Leaving inquire_cred\n");
@@ -2730,7 +2749,8 @@ spnego_gss_acquire_cred_with_password(OM_uint32 *minor_status,
 
 	status = get_available_mechs(minor_status, desired_name,
 				     cred_usage, GSS_C_NO_CRED_STORE,
-				     NULL, &amechs, NULL);
+				     NULL, GSS_C_NO_OID_SET,
+				     &amechs, NULL);
 	if (status != GSS_S_COMPLETE)
 	    goto cleanup;
 
@@ -3185,7 +3205,8 @@ static OM_uint32
 get_available_mechs(OM_uint32 *minor_status,
 	gss_name_t name, gss_cred_usage_t usage,
 	gss_const_key_value_set_t cred_store,
-	gss_cred_id_t *creds, gss_OID_set *rmechs, OM_uint32 *time_rec)
+	gss_cred_id_t *creds, gss_OID_set desired_attrs,
+	gss_OID_set *rmechs, OM_uint32 *time_rec)
 {
 	unsigned int	i;
 	int		found = 0;
@@ -3271,7 +3292,8 @@ get_available_mechs(OM_uint32 *minor_status,
  */
 static OM_uint32
 get_negotiable_mechs(OM_uint32 *minor_status, spnego_gss_cred_id_t spcred,
-		     gss_cred_usage_t usage, gss_OID_set *rmechs)
+		     gss_cred_usage_t usage, gss_OID_set desired_attrs,
+		     gss_OID_set *rmechs)
 {
 	OM_uint32 ret, tmpmin;
 	gss_cred_id_t creds = GSS_C_NO_CREDENTIAL, *credptr;
@@ -3289,7 +3311,7 @@ get_negotiable_mechs(OM_uint32 *minor_status, spnego_gss_cred_id_t spcred,
 		credptr = (usage == GSS_C_INITIATE) ? &creds : NULL;
 		ret = get_available_mechs(minor_status, GSS_C_NO_NAME, usage,
 					  GSS_C_NO_CRED_STORE, credptr,
-					  rmechs, NULL);
+					  desired_attrs, rmechs, NULL);
 		gss_release_cred(&tmpmin, &creds);
 		return (ret);
 	}
-- 
2.9.4

